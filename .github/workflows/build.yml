name: build-and-release
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v2
      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      - if: ${{ runner.os != 'Windows' }}
        run: chmod +x ./gradlew
      - run: ./gradlew build

      - name: Check if release exists
        id: check_release
        continue-on-error: true
        run: |
          gh release view ${{ github.ref_name }} --json tagName
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release (if it doesn't exist)
        if: steps.check_release.outcome != 'success'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Get Release ID (if it exists)
        if: steps.check_release.outcome == 'success'
        id: get_release_id
        run: |
          RELEASE_ID=$(gh release view ${{ github.ref_name }} --json id -q .id)
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Upload Release Asset
        run: |
          gh release upload ${{ github.ref_name }} "${{ steps.find_jar.outputs.jar_path }}" --title "Release ${{ github.ref_name }}" --notes "" --target ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
